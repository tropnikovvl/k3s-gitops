---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: paperless
  namespace: home
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 1.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 5m

  install:
    createNamespace: true
    remediation:
      retries: 5

  upgrade:
    remediation:
      retries: 5

  dependsOn:
    - name: ingress-nginx
      namespace: networking
    - name: rook-ceph
      namespace: rook-ceph

  # See https://github.com/k8s-at-home/charts/blob/master/charts/paperless/values.yaml
  values:
    image:
      repository: ghcr.io/paperless-ngx/paperless-ngx
      tag: "1.10"

    env:
      TZ: "${TZ}"
      PAPERLESS_OCR_LANGUAGE: deu
      PAPERLESS_TIME_ZONE: "Europe/Berlin"
      PAPERLESS_CONSUMER_POLLING: "60"
      PAPERLESS_REDIS: redis://localhost:6379
      PAPERLESS_DBHOST: "${SECRET_PAPERLESS_POSTGRES_HOST}"
      PAPERLESS_DBUSER: "${SECRET_PAPERLESS_POSTGRES_USER}"
      PAPERLESS_DBPASS: "${SECRET_PAPERLESS_POSTGRES_PASSWORD}"
      PAPERLESS_PORT: 8000
      PAPERLESS_URL: "https://dms.${SECRET_DOMAIN}"

    service:
      main:
        ports:
          http:
            port: 8000

    persistence:
      data:
        enabled: true
        mountPath: /usr/src/paperless/data
        existingClaim: paperless-data-v1
      media:
        enabled: true
        mountPath: /usr/src/paperless/media
        existingClaim: paperless-media-v1
      consume:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS02}"
            path: /nas02/shares/dms-import
        mountPath: /usr/src/paperless/consume
      export:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS02}"
            path: /nas02/shares/dms-export
        mountPath: /usr/src/paperless/export

    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "note-multiple"
        hosts:
          - host: &host "dms.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host

    resources:
      requests:
        cpu: 11m
        memory: 411M
      limits:
        cpu: 11m
        memory: 411M

    additionalContainers:
      - name: broker
        image: redis:7.0
        imagePullPolicy: IfNotPresent

        resources:
          requests:
            cpu: 11m
            memory: 32M
